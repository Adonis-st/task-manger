import { useRouter } from "next/router";
import { trpc } from "../../utils/trpc";
import Error from "next/error";
import { useForm } from "react-hook-form";
import { useState } from "react";
import { Column } from "../components/Column";
import Head from "next/head";
import { Spinner } from "../components/Spinner";
import { useSession } from "next-auth/react";

export default function BoardPage() {
  const { data: sessionData } = useSession();
  const router = useRouter();
  const boardId = router.query.boardId as string;
  const {
    data: singleBoard,
    isLoading,
    refetch,
  } = trpc.boards.singleBoard.useQuery({
    boardId,
  });

  const [addCol, setAddCol] = useState({
    boardId,
    data: {
      title: "New Col title",
    },
  });

  const isEmpty = singleBoard?.columns.length === 0;
  const currentColumns = singleBoard?.columns;

  const { mutate, isSuccess, isError } = trpc.boards.addColumn.useMutation();

  const onSubmit = () => {
    mutate(addCol);
    if (isSuccess) {
      return console.log();
    } else if (isError) {
      return console.log("error");
    }
  };
  if (!sessionData) {
    return null;
  }

  if (isLoading) {
    return <Spinner />;
  }

  if (!singleBoard) {
    return <Error statusCode={404} />;
  }

  return (
    <>
      <Head>
        <title>{singleBoard.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="">
        {isEmpty && (
          <div>
            This board is empty Create a new Column to get Started.
            <button onClick={onSubmit} className="btn-primary-s">
              + Add New Column
            </button>
          </div>
        )}
        <div className=" grid h-[91vh] auto-cols-max grid-flow-col gap-x-4 overflow-x-auto">
          {singleBoard?.columns.map((col, index) => {
            return (
              <Column
                key={col.id}
                col={col}
                currentColumns={currentColumns}
                refetch={refetch}
                index={index}
              />
            );
          })}
        </div>
      </div>
    </>
  );
}
